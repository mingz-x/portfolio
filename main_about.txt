<template>
    <div class="key">
        <div class="key_btn">
            <div class="btn" data-target="positive">
                <div class="S_img"><img src="green_S.jpg" alt="긍정적" /></div>
                <span>긍정적</span>
            </div>
            <div class="btn" data-target="analytical">
                <div class="S_img"><img src="red_S.jpg" alt="분석적" /></div>
                <span>분석적</span>
            </div>
            <div class="btn" data-target="creative">
                <div class="S_img"><img src="yellow_S.jpg" alt="창의적" /></div>
                <span>창의적</span>
            </div>
            <div class="btn" data-target="communication">
                <div class="S_img"><img src="blue_S.jpg" alt="의사소통" /></div>
                <span>의사소통</span>
            </div>
        </div>
        <div class="key_word">
            <div class="word" id="positive">
                <div class="B_img"><img src="green_B.jpg" alt="긍정적" /></div>
                <div class="kw">
                    <span># 긍정적인</span>
                    <p>긍정적인 성격으로 문제 해결과 협업 등 팀워크에서 긍정적인 에너지를 발산합니다.</p>
                </div>
            </div>
            <div class="word" id="analytical">
                <div class="B_img"><img src="red_B.jpg" alt="분석적" /></div>
                <div class="kw">
                    <span># 분석적인</span>
                    <p>차분하게 데이터를 분석하고 꼼꼼하게 작업하여 코드의 품질을 높입니다.</p>
                </div>
            </div>
            <div class="word" id="creative">
                <div class="B_img"><img src="yellow_B.jpg" alt="창의적" /></div>
                <div class="kw">
                    <span># 창의적인</span>
                    <p>창의적 사고로 혁신적인 해결책을 제시합니다.</p>
                </div>
            </div>
            <div class="word" id="communication">
                <div class="B_img"><img src="blue_B.jpg" alt="의사소통" /></div>
                <div class="kw">
                    <span># 의사소통</span>
                    <p>다양한 팀원들과의 협업에서 효과적인 의사소통 능력을 구사합니다.</p>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
export default {
    document.addEventListener('DOMContentLoaded', function() {
        // btn을 클릭하면 해당 word로 스크롤
        const buttons = document.querySelectorAll('.key_btn .btn');
        const words = document.querySelectorAll('.key_word .word');
        
        buttons.forEach((btn) => {
            btn.addEventListener('click', function() {
                const targetId = btn.getAttribute('data-target');

                // 1. 모든 btn에서 'selected' 클래스 제거
                buttons.forEach(button => button.classList.remove('selected'));
                // 2. 선택한 btn에 'selected' 클래스 추가
                btn.classList.add('selected');

                // 3. 모든 word에서 'visible' 클래스 제거
                words.forEach(word => word.classList.remove('visible'));
                // 4. 선택한 word만 'visible' 클래스 추가
                document.getElementById(targetId).classList.add('visible');

                // 5. 스크롤을 해당 word로 이동
                document.querySelector('.key_word').scrollTop = document.getElementById(targetId).offsetTop - 20;
            });
        });

        // 초기 선택 (첫번째 버튼)
        buttons[0].click();
    });
}

</script>

<style lang="scss">
.main{
    .key {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .key_btn {
        display: flex;
        justify-content: space-around;
        width: 100%;
        margin-bottom: 20px;
    }

    .btn {
        cursor: pointer;
        text-align: center;
        padding: 10px;
    }

    .btn.selected {
        background-color: #f0f0f0;
        font-weight: bold;
    }

    .key_word {
        display: flex;
        flex-direction: column;
        max-height: 300px;
        overflow-y: auto;
        width: 100%;
    }

    .word {
        display: none; /* Initially hide all words */
        padding: 20px;
        border: 1px solid #ccc;
        margin-bottom: 10px;
    }

    .word.visible {
        display: block; /* Show the word when selected */
    }

    .S_img img,
    .B_img img {
        width: 30px;
        height: 30px;
        vertical-align: middle;
    }

    .kw {
        display: inline-block;
        margin-left: 10px;
    }
}
</style>





Chat GPT

1. 스크롤 형식: key_word의 각 word 요소는 스크롤 형식으로 보여지고, 클릭된 btn에 따라 word가 해당하는 부분만 보이도록 합니다.
2. 스타일링: btn은 클릭 시 색상이 진하게 변하고, 선택된 btn에 해당하는 word가 스크롤되어 보여지도록 합니다.

설명
- HTML: 각 버튼(btn)에 data-target 속성을 추가하여 해당 버튼이 클릭되었을 때 어떤 word를 보여줄지 구분합니다.
- CSS: word는 기본적으로 숨겨져 있으며, 클릭된 버튼에 해당하는 word만 visible 클래스를 추가하여 보여줍니다.
- JavaScript:
    - 버튼을 클릭하면 data-target 값에 맞는 word만 보이도록 visible 클래스를 추가하고, 나머지 word들은 숨깁니다.
    - 선택된 버튼은 selected 클래스를 통해 스타일을 변경하며, key_word 영역은 해당 word로 스크롤됩니다.
    - 첫 번째 버튼을 클릭하여 초기 상태를 설정합니다.
동작 방식
1. 처음 페이지 로드 시 첫 번째 버튼이 자동으로 선택되어 해당하는 word가 보입니다.
2. 각 버튼을 클릭하면 해당 버튼에 맞는 word가 표시되고, 나머지 word는 숨겨집니다.
3. 버튼이 클릭되면, 그 버튼에 해당하는 word 부분으로 스크롤이 이동합니다.
4. 버튼에 마우스를 올리면 해당 버튼의 색상이 조금 더 진해집니다 (클릭 시 강조 효과).



내 css style 코드에 추가해서 다시

알겠습니다! 이미 작성하신 CSS를 바탕으로 필요한 기능을 추가하고 조정할 수 있도록 스타일을 작성해드리겠습니다.

1. 선택된 버튼 강조하기 (클릭된 버튼 스타일)
버튼이 클릭되면 선택된 버튼에 강조 스타일을 추가하도록 할 것입니다. 이 때 selected 클래스를 사용하여 선택된 버튼에 배경색을 추가하고, 텍스트 색상을 변경할 수 있습니다.

2. 스크롤과 애니메이션 추가
key_word 영역의 word들이 스크롤 형식으로 전환될 때, 선택된 버튼에 맞는 word만 보이도록 하며, 스크롤이 부드럽게 이동하도록 합니다.

수정 된 style
<style lang="scss">
    .key {
        display: flex;
        align-items: center;
        justify-content: space-around;
        width: 100%;
        margin-top: 50px;
    }

    .key_btn {
        display: flex;
        justify-content: space-around;
        width: 100%;
    }

    .btn {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 20px;
        margin: 20px;
        cursor: pointer;
        padding: 10px;
        border-radius: 5px;
        transition: background-color 0.3s, color 0.3s;

        /* 버튼 클릭시 강조 스타일 */
        &.selected {
            background-color: #f0f0f0;
            color: #0066cc; /* 선택된 버튼 텍스트 색상 */
            font-weight: bold;
        }

        .S_img {
            width: 30px;
            img {
                width: 100%;
            }
        }

        span {
            width: 100px;
            text-align: left;
            font-weight: 500;
            font-size: 1.5em; /* 24px */
            color: #333;
        }

        /* 버튼에 hover 효과 추가 */
        &:hover {
            background-color: #e6e6e6;
        }
    }

    .key_word {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100%;
        max-height: 400px;
        overflow-y: auto;
        transition: all 0.3s ease;

        /* 스크롤 애니메이션 */
        .word {
            display: none; /* 기본적으로 모든 단어는 숨겨짐 */
            padding: 30px;
            margin: 20px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 50px;
            transition: opacity 0.3s ease-in-out;
            opacity: 0; /* 기본 투명도 */
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #fafafa;

            &.visible {
                display: flex;
                opacity: 1; /* 선택된 단어만 보이도록 */
            }

            .B_img {
                width: 100px;
                img {
                    width: 100%;
                }
            }

            .kw {
                width: 340px;
                text-align: left;

                span {
                    color: #555;
                    font-weight: bold;
                    font-size: 1.5em; /* 24px */
                }

                p {
                    margin-top: 10px;
                    font-size: 1.25em;
                    color: #666;
                }
            }
        }
    }
</style>

주요 수정 사항
1. 버튼 강조 (.selected):
- 버튼이 클릭되었을 때 배경색을 #f0f0f0으로 설정하고, 텍스트 색상은 #0066cc로 강조합니다.
- 또한 버튼에 마우스를 올리면 배경색이 살짝 변화하도록 &:hover 스타일을 추가했습니다.

2. 스크롤 영역 (key_word):
- 각 word는 기본적으로 display: none으로 숨겨두고, 클릭된 버튼에 맞는 word만 visible 클래스를 추가하여 보이도록 설정합니다.
- word의 전환 시 부드러운 페이드 인/아웃 효과를 위해 opacity와 transition을 활용했습니다.

3. 스크롤 영역의 크기와 스타일 조정:
- key_word 영역의 높이를 제한하고, 스크롤이 생기도록 max-height와 overflow-y: auto를 설정했습니다.
- 각 word는 **margin과 padding**을 통해 적당한 간격을 주었으며, 선택된 word만 부드럽게 나타나도록 했습니다.


JavaScript (스크롤과 버튼 클릭 동작)
이제 위의 CSS가 제대로 적용되도록 JavaScript에서 버튼 클릭 시 해당하는 word만 보이도록 클래스를 변경하고 스크롤을 이동하게 합니다.

<script>
document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('.key_btn .btn');
    const words = document.querySelectorAll('.key_word .word');
    
    buttons.forEach((btn) => {
        btn.addEventListener('click', function() {
            const targetId = btn.getAttribute('data-target');

            // 1. 모든 btn에서 'selected' 클래스 제거
            buttons.forEach(button => button.classList.remove('selected'));
            // 2. 선택한 btn에 'selected' 클래스 추가
            btn.classList.add('selected');

            // 3. 모든 word에서 'visible' 클래스 제거
            words.forEach(word => word.classList.remove('visible'));
            // 4. 선택한 word만 'visible' 클래스 추가
            document.getElementById(targetId).classList.add('visible');

            // 5. 스크롤을 해당 word로 이동
            document.querySelector('.key_word').scrollTop = document.getElementById(targetId).offsetTop - 20;
        });
    });

    // 초기 선택 (첫번째 버튼)
    buttons[0].click();
});

</script>

이 코드가 하는 일:
- 버튼 클릭 시: 클릭한 버튼에 selected 클래스를 추가하고, 그 버튼에 해당하는 word를 visible로 보여줍니다.
- 스크롤: 클릭한 word가 화면에 보이도록 스크롤을 이동시킵니다.
동작 확인:
이제 브라우저에서 위의 CSS와 JavaScript 코드를 실행하면, 버튼 클릭 시 해당하는 word가 표시되고, 버튼은 선택되며 강조됩니다. 스크롤 효과와 페이드 인/아웃 애니메이션도 적용됩니다.






수정된
네, 가능합니다! 원하는 대로 각 word가 선택되지 않은 상태에서 투명도를 90%로 조절할 수 있습니다. 이를 통해 선택된 word만 완전히 보이게 하고, 나머지 word들은 살짝 흐릿하게 처리할 수 있습니다.

이 효과를 CSS에서 opacity를 이용해 구현할 수 있습니다. 선택된 word는 opacity를 1로 유지하고, 나머지 word는 opacity를 0.9로 설정하면 됩니다. 그리고 선택된 word만 visible 클래스를 적용하여 나타내고, 나머지는 흐릿하게 표시되도록 합니다.

CSS
.key {
    display: flex;
    align-items: center;
    justify-content: space-around;
    width: 100%;
    margin-top: 50px;
}

.key_btn {
    display: flex;
    justify-content: space-around;
    width: 100%;
}

.btn {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 20px;
    margin: 20px;
    cursor: pointer;
    padding: 10px;
    border-radius: 5px;
    transition: background-color 0.3s, color 0.3s;

    /* 버튼 클릭시 강조 스타일 */
    &.selected {
        background-color: #f0f0f0;
        color: #0066cc; /* 선택된 버튼 텍스트 색상 */
        font-weight: bold;
    }

    .S_img {
        width: 30px;
        img {
            width: 100%;
        }
    }

    span {
        width: 100px;
        text-align: left;
        font-weight: 500;
        font-size: 1.5em; /* 24px */
        color: #333;
    }

    /* 버튼에 hover 효과 추가 */
    &:hover {
        background-color: #e6e6e6;
    }
}

.key_word {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    max-height: 400px;
    overflow-y: auto;
    transition: all 0.3s ease;

    .word {
        display: none; /* 기본적으로 모든 단어는 숨겨짐 */
        padding: 30px;
        margin: 20px 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 50px;
        transition: opacity 0.3s ease-in-out;
        opacity: 0.9; /* 기본 투명도 90% */
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #fafafa;

        /* 선택된 word만 완전하게 보이게 */
        &.visible {
            display: flex;
            opacity: 1; /* 선택된 word는 100% opacity */
        }

        .B_img {
            width: 100px;
            img {
                width: 100%;
            }
        }

        .kw {
            width: 340px;
            text-align: left;

            span {
                color: #555;
                font-weight: bold;
                font-size: 1.5em; /* 24px */
            }

            p {
                margin-top: 10px;
                font-size: 1.25em;
                color: #666;
            }
        }
    }
}

핵심 변경 사항:
1. 기본 상태에서 word의 투명도:
- 모든 word는 기본적으로 opacity: 0.9로 설정되어 살짝 흐릿하게 표시됩니다.
- 선택된 word는 opacity: 1로 설정되어 선명하게 표시됩니다.
2. word의 선택 상태 (.visible):
- 클릭된 버튼에 해당하는 word에만 visible 클래스를 추가하고, 이를 통해 해당 word만 완전히 보여지도록 처리합니다.
- opacity 값을 1로 변경하여 선택된 word만 선명하게 보이게 합니다.

JavaScript (변경 없이 그대로 사용)
JavaScript는 그대로 사용해도 됩니다. 이 코드에서는 각 버튼을 클릭할 때 해당하는 word에 visible 클래스를 추가하고, 나머지 word는 opacity: 0.9로 유지됩니다.

document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('.key_btn .btn');
    const words = document.querySelectorAll('.key_word .word');
    
    buttons.forEach((btn) => {
        btn.addEventListener('click', function() {
            const targetId = btn.getAttribute('data-target');

            // 1. 모든 btn에서 'selected' 클래스 제거
            buttons.forEach(button => button.classList.remove('selected'));
            // 2. 선택한 btn에 'selected' 클래스 추가
            btn.classList.add('selected');

            // 3. 모든 word에서 'visible' 클래스 제거
            words.forEach(word => word.classList.remove('visible'));
            // 4. 선택한 word만 'visible' 클래스 추가
            document.getElementById(targetId).classList.add('visible');

            // 5. 스크롤을 해당 word로 이동
            document.querySelector('.key_word').scrollTop = document.getElementById(targetId).offsetTop - 20;
        });
    });

    // 초기 선택 (첫번째 버튼)
    buttons[0].click();
});

동작 설명
- 기본적으로 모든 word는 opacity: 0.9로 표시되어 살짝 흐릿한 상태입니다.
- 버튼 클릭 시:
    - 클릭된 버튼에 해당하는 word만 opacity: 1로 설정되어 선명하게 보이게 됩니다.
    - 선택되지 않은 다른 word들은 여전히 opacity: 0.9로 유지됩니다.

이렇게 하면, 선택된 버튼과 word는 진하게 표시되고, 나머지는 살짝 흐릿하게 보이도록 할 수 있습니다. 이 효과는 버튼의 강조 상태와 비슷하게 동작하며, 시각적으로도 구분이 쉽고 깔끔하게 보일 것입니다.